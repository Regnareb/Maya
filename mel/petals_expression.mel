vector $rotPP;
$rotPP = FX_flowerPetals01_nParticleShape.rotPP;

float $conserveCollision = c_FX_flowerPetals01.conserveCollision;
float $rotationVelocity = c_FX_flowerPetals01.rotationVelocity;
int $instance2mesh = c_FX_flowerPetals01.instance2mesh;




if (FX_flowerPetals01_nParticleShape.collisionGeometryIndex != -1) 
{
    float $fx[16], $fy[16], $fz[16];
    vector $resA, $resB, $resFIN;
    float $radX, $radY, $radZ, $degX, $degY, $degZ;

vector $dir = <<0,1,0>>; // particle vector (normal) to compare with world vector.

$degX = $rotPP.x;
$degY = $rotPP.y;
$degZ = $rotPP.z;

// right-handed to left-handed
$degX *= -1;
$degY *= -1;
$degZ *= -1;

$radX = deg_to_rad($degX);
$radY = deg_to_rad($degY);
$radZ = deg_to_rad($degZ);

$fx[0]= 1;
$fx[1]= 0;
$fx[2]= 0;
$fx[3]= 0;

$fx[4]= 0;
$fx[5]= cos($radX);
$fx[6]= -sin($radX);
$fx[7]= 0;

$fx[8]= 0;
$fx[9]= sin($radX);
$fx[10]= cos($radX);
$fx[11]= 0;

$fx[12]= 0;
$fx[13]= 0;
$fx[14]= 0;
$fx[15]= 1;

$fy[0]= cos($radY);
$fy[1]= 0;
$fy[2]= sin($radY);
$fy[3]= 0;

$fy[4]= 0;
$fy[5]= 1;
$fy[6]= 0;
$fy[7]= 0;

$fy[8]= -sin($radY);
$fy[9]= 0;
$fy[10]= cos($radY);
$fy[11]= 0;

$fy[12]= 0;
$fy[13]= 0;
$fy[14]= 0;
$fy[15]= 1;

$fz[0]= cos($radZ);
$fz[1]= -sin($radZ);
$fz[2]= 0;
$fz[3]= 0;

$fz[4]= sin($radZ);
$fz[5]= cos($radZ);
$fz[6]= 0;
$fz[7]= 0;

$fz[8]= 0;
$fz[9]= 0;
$fz[10]= 1;
$fz[11]= 0;

$fz[12]= 0;
$fz[13]= 0;
$fz[14]= 0;
$fz[15]= 1;

$selectedObjects = `ls -sl`; //to prevent the bug caused by pointMatrixMult
$resA = pointMatrixMult($dir, $fx); //rotation around X
$resB = pointMatrixMult($resA, $fy); //rotation around Y
$resFIN = pointMatrixMult($resB, $fz); //rotation around Z
select $selectedObjects; //to prevent the bug caused by pointMatrixMult






vector $vector1 = <<0, 1, 0>>; // World vector to compare with.
float $degAngle = rad_to_deg (`angle $vector1 $resFIN`); // Degree angle between the world vector, and the particle vector.
float $produitScal = dotProduct($resFIN,$vector1,1); // Scalar product, 0 is vertical, 1 and -1 is horizontal. 

int $particleId = FX_flowerPetals01_nParticleShape.particleId;
//print ("Vector " + $particleId + "  : " + $resFIN + "\r\n");
//print ("Degree " + $particleId + "  : " + $degAngle + "\r\n");
//print ("Scalaire " + $particleId + "  : " + $produitScal + "\r\n");
//print("Velocity " + $particleId + "  : " + $vel + "\r\n");
//print("Angle " + $particleId + "  : " + $degAngle + "\r\n\r\n");




// If not horizontal, continue to rotate the particle.
if ($produitScal > -0.8 && $produitScal < 0.8){
    FX_flowerPetals01_nParticleShape.rotPP += 5;
//print ("Particle " + $particleId + " verticale !\r\n");
}
// If horizontal, copy the instance to a real object.
else if ($instance2mesh) 
{
    if (FX_flowerPetals01_nParticleShape.event == 1) // Set the time at first collision.
    {
        global float $startTime = 0;
        $startTime = `currentTime -q`;
        FX_flowerPetals01_nParticleShape.velocity = FX_flowerPetals01_nParticleShape.velocity * 0.98;
    }
    else if (FX_flowerPetals01_nParticleShape.event > 1) // After the 2nd+ collision
    {
        float $elapsedTime = `currentTime -q` - $startTime;
        if ($elapsedTime <25) // Wait 25 frames
        {
            float $elapsedTime = `currentTime -q` - $startTime;
        }
        else // Delete the particle/copy the mesh/move and rotate the mesh.
        {
            int $instancedNb = c_FX_flowerPetals01.instancedNb;
            vector $posPP = FX_flowerPetals01_nParticleShape.worldPosition;
            print ($posPP + "\r\n");

            string $instancers[] = `ls -type "instancer"`;
            string $instancedObjs[] = `listConnections -d 0 -s 1 ($instancers[0]+".inputHierarchy")`; // liste des géometries instancées
            int $geoId = FX_flowerPetals01_nParticleShape.particleId%$instancedNb; // id de la géometrie instanciée

            select ($instancedObjs[$geoId]);
            duplicate -rr -name "FX_msh_petals";
            setKeyframe -v 1 -at visibility; 
            setKeyframe -v 0 -t (`currentTime -q` -1) -at visibility;
            string $currentSelection = print(`ls -selection`);
            string $currentSelectionArray[] = `ls -selection`;
            parent $currentSelectionArray[0] FX_instanceCopy;
            makeIdentity -apply true -r 1;
            setAttr ($currentSelection+ ".t") ($posPP.x) ($posPP.y) ($posPP.z);
            setAttr ($currentSelection+ ".r") ($rotPP.x) ($rotPP.y) ($rotPP.z);
            FX_flowerPetals01_nParticleShape.lifespanPP = 0;
        }
    }





}
}




// If no collision, continue to rotate.
else
{
    vector $vel = (FX_flowerPetals01_nParticleShape.velocity) * $rotationVelocity;
    FX_flowerPetals01_nParticleShape.rotPP += $vel; // Control the speed rotation according to the speed of the particle.
}
